local CollectManager = Component.Manager.CollectManager

function CollectManager:ctor()
    self.log_times = {}
    self.cache_log_times = {}
    local time = os.time()
    self.day = tonumber(os.date("%j", time))
    self.next_save_time = time + math.random(120, 180)
end

function CollectManager:Init()
    
end

function CollectManager:AddSystemLogTimes(enum, times)
    local before_times = self.log_times[enum or 0] or 0
    self.log_times[enum or 0] = before_times + times
end

function CollectManager:SaveLogCache()
    for key, value in pairs(self.log_times) do
        local cache_times = self.cache_log_times[key] or 0
        self.cache_log_times[key] = cache_times + value
    end
    self.log_times = {}

    return self.cache_log_times
end

function CollectManager:ClearCacheLog()
    self.cache_log_times = {}
end

function CollectManager:SaveCollectData(day, pass)
    if not day then
        return
    end
    local time = os.time()
    if not pass then
        if time < self.next_save_time then
            return
        end
    end
    self.next_save_time = time + math.random(120, 180)
    
    local ret = CloudSever:UpdateDataListByKey(CONST.CollectDBName, tostring(day), function (ret,key,js)
        -- print("CloudSever:UpdateDataListByKey" .. (ret or -1))
        if ret == ErrorCode1.succ then    -- ret 0 很遗憾，数据冲突了， -- 需要根据带回来的最新value进行逻辑处理后返回给底层重试
            local data = {}
            if js and string.len(js) > 0 then
                data = ChangeJsonNumKey(JSON:decode(js))
            end
            --逻辑处理，开发者可根据自己的逻辑，进行增加/减少相应的数值。如实例中是，值+1，则每次都累加1，获取到服务器中最新的值，进行+1
            local logs = self:SaveLogCache()
            for enum, times in pairs(logs) do
                data[enum] = (data[enum] or 0) + times
            end
            --返回给底层重试
            local new_js = JSON:encode(data)
            return new_js
        elseif ret == 2 then    -- ret 2 修改成功啦
            self:ClearCacheLog()
        end
    end)
end

function CollectManager:OnMinute()
    local time = os.time()
    local day = tonumber(os.date("%j", time)) or 1
    local pass
    if self.day ~= day then
        pass = true
    end
    self:SaveCollectData(self.day, pass)
    self.day = day
end

function CollectManager:PlayerLeave()
    local all_player = G_PlayerManager:GetAllPlayer()
    if all_player and next(all_player) then
        return
    end
    self:SaveCollectData(self.day, true)
end